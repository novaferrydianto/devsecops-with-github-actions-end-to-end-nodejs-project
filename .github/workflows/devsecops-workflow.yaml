name: Build code, run unit test, run SAST, SCA, DAST security scans for NodeJs App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 3 * * 0' # Weekly Sunday auto security scan

permissions:
  contents: read
  security-events: write
  actions: read # For workflow command usage

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build, Unit Tests, and SAST Scan
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests ðŸ§ª
        # This step verifies functionality and generates the 'coverage/lcov.info' report.
        run: npm test

      - name: SonarCloud Scan (SAST)
        uses: sonarsource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=devsecopsganodejs
            -Dsonar.projectKey=devsecopsganodejs
            # Passes unit test coverage results from the previous step to SonarCloud
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

---

  security:
    runs-on: ubuntu-latest
    needs: build
    name: Run the SCA scan on dependencies
    steps:
      - uses: actions/checkout@v4
      
      # Node setup is needed to ensure Snyk can analyze node modules and lock files
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Dependencies for Snyk
        run: npm install

      - name: Run Snyk to check for vulnerabilities (SCA)
        # Snyk scans for vulnerabilities in your package.json and node_modules
        uses: snyk/actions/node@master
        continue-on-error: true # Allows the workflow to continue even if vulnerabilities are found
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

---

  dast_zap:
    name: DAST Scan with OWASP ZAP ðŸŽ¯
    runs-on: ubuntu-latest
    needs: security
    continue-on-error: true
    
    # ðŸ’¡ CORRECT IMPLEMENTATION: Launches your application as a service container 
    # accessible locally by the ZAP action.
    services:
      app:
        image: node:20-alpine
        ports:
          # Maps container port 3000 to the runner host's port 3000
          - 3000:3000 
        options: >-
          --name dast_app_service
          --entrypoint /bin/sh
          # Installs dependencies and starts the app (assumes 'npm start' works)
          -c "npm install && npm start"

    steps:
      - uses: actions/checkout@v4
      
      - name: Wait for App Service to be ready
        # Gives the Node.js application 30 seconds to boot up before the scan starts
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'

      - name: Run OWASP ZAP Full Scan (DAST)
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          # Target is the local port exposed by the 'app' service
          target: 'http://localhost:3000'
          cmd_options: '-a'
          issue_title: ZAP Full Scan Report
          fail_action: false
          allow_issue_writing: true

      - name: Upload ZAP Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html
