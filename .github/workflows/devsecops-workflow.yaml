name: Build code, run unit test, run SAST, SCA, DAST security scans for NodeJs App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Prevent duplicate runs per ref
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Least-privilege; bump if needed
permissions:
  contents: read
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: '18'

jobs:
  # 0) Super fast secret scan to fail early on PRs
  secrets_scan:
    name: TruffleHog Secret Scan
    # Use self-hosted if you actually have trufflehog preinstalled; otherwise switch to ubuntu-latest + docker
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      # If your self-hosted runner doesn't have trufflehog in PATH, uncomment below:
      # - name: Install TruffleHog
      #   run: |
      #     pipx install trufflehog

      - name: Run TruffleHog
        run: |
          trufflehog filesystem . \
            --exclude-paths trufflehog-excluded-paths.txt \
            --no-update --fail --json > trufflehog-report.json || true
          jq '.[0]' trufflehog-report.json || true

      - name: Upload TruffleHog Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-report
          path: trufflehog-report.json

  # 1) Build + test + SAST (SonarCloud)
  build_test_sast:
    name: Build, Unit Test & SAST
    runs-on: ubuntu-latest
    needs: [secrets_scan]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm test --if-present

      # If you produce coverage (e.g., Jest), expose it to Sonar with sonar-project.properties or args
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=devsecopsganodejs
            -Dsonar.projectKey=devsecopsganodejs

  # 2) SCA (Snyk) with SARIF surfaced in GitHub Security tab
  sca_snyk:
    name: SCA Scan (Snyk)
    runs-on: ubuntu-latest
    needs: [build_test_sast]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Dependencies (frozen lockfile)
        run: npm ci

      - name: Snyk Test (JSON + SARIF)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npx snyk test \
            --all-projects \
            --severity-threshold=high \
            --json-file-output=snyk.json || true
          npx snyk test \
            --all-projects \
            --severity-threshold=high \
            --sarif-file-output=snyk.sarif || true

      - name: Upload Snyk Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: |
            snyk.json
            snyk.sarif

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  # 3) DAST (ZAP) only on push to main (skip on PR to reduce noise)
  dast_zap:
    name: DAST Scan (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: [sca_snyk]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      # Choose one of these targets:
      # - Deployed URL via secret (recommended): set DAST_PROD_URL in repo secrets
      # - Or start local app + scan localhost

      - name: Resolve Target URL
        id: target
        run: |
          if [ -n "${{ secrets.DAST_PROD_URL }}" ]; then
            echo "url=${{ secrets.DAST_PROD_URL }}" >> "$GITHUB_OUTPUT"
          else
            echo "url=http://localhost:3000" >> "$GITHUB_OUTPUT"
          fi

      - name: Start App (only if scanning localhost)
        if: steps.target.outputs.url == 'http://localhost:3000'
        run: |
          npm run build --if-present
          npm run start &
          npx wait-on ${{ steps.target.outputs.url }} --timeout 120000

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'zaproxy/zap-stable'
          target: ${{ steps.target.outputs.url }}
          cmd_options: '-a'            # authenticate passive scan; tweak as needed
          issue_title: "ZAP Scan Baseline Report - main"
          fail_action: false           # keep pipeline green; gate via policy later
          allow_issue_writing: true

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_html.html
            report_md.md
            report_json.json
