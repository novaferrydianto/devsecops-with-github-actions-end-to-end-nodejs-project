name: Build code, run unit test, run SAST, SCA, DAST security scans for NodeJs App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 3 * * 0' # Weekly Sunday auto security scan

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build, Unit Tests, and SAST Scan
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4 # 💡 FIX: Upgraded to v4
        with:
          node-version: 20
          cache: npm

      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests 🧪
        # 💡 FIX: Added unit test execution.
        # Ensure your package.json has a 'test' script and generates coverage reports (e.g., lcov.info).
        run: npm test

      - name: SonarCloud Scan (SAST)
        uses: sonarsource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=devsecopsganodejs
            -Dsonar.projectKey=devsecopsganodejs
            # 💡 ENHANCEMENT: Include unit test coverage path for SonarCloud analysis (Adjust path if needed)
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  security:
    runs-on: ubuntu-latest
    needs: build
    name: Run the SCA scan on dependencies
    steps:
      - uses: actions/checkout@v4
      
      # 💡 FIX: Node setup and dependency install are needed for Snyk to analyze the dependency tree
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Dependencies for Snyk
        run: npm install

      - name: Run Snyk to check for vulnerabilities (SCA)
        # ⚠️ WARNING: Consider replacing @master with a full SHA hash for security stability.
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  dast_zap:
    name: DAST Scan with OWASP ZAP 🎯
    runs-on: ubuntu-latest
    needs: security
    continue-on-error: true
    
    # 💡 CRITICAL FIX: The DAST job must run the web application first.
    services:
      # Use the image you would use for your application (e.g., node:20-alpine)
      app:
        image: node:20-alpine
        ports:
          # Map the internal port (e.g., 3000) to the host (runner) port 3000
          - 3000:3000 
        options: >-
          --name dast_app_service
          --entrypoint /bin/sh
          # Set the entrypoint to a shell command that installs dependencies and starts the app
          -c "npm install && npm start"

    steps:
      - uses: actions/checkout@v4
      
      # 💡 IMPORTANT: Wait for the application service to be fully ready before ZAP runs
      - name: Wait for App Service to be ready
        # This assumes your app is running on port 3000 (http://localhost:3000). Adjust if needed.
        uses: jakejarvis/wait-action@master
        with:
          time: '30s' 
          # You could use a more sophisticated check like 'curl -s -o /dev/null -w "%{http_code}" http://localhost:3000'

      - name: Run OWASP ZAP Full Scan (DAST)
        # 💡 BEST PRACTICE: Use the official action for ZAP, which is much simpler and safer than inline docker commands.
        uses: zaproxy/action-full-scan@v0.12.0 # Using Full Scan for better coverage
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          # CRITICAL FIX: The target must be the service running locally on the host
          target: 'http://localhost:3000' 
          cmd_options: '-a'
          issue_title: ZAP Full Scan Report
          fail_action: false # Do not fail the workflow if ZAP finds alerts
          allow_issue_writing: true
          # Artifacts are automatically generated by the ZAP action, just need to upload them.

      - name: Upload ZAP Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html
